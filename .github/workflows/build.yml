---
# A lot of this was taken from justjanne/powerline-go
name: Build
on: push
jobs:
  release-linux:
    name: Build release binaries for linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'amd64', 'arm64', 'arm' ]
        go-version: [ '1.15', '1.16' ]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - run: go build -o release/powerline-go-$GOOS-$GOARCH
        env:
          CGO_ENABLED: 0
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
  release-macos:
    name: Build release binaries for macOS
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'amd64' ]
        go-version: [ '1.15', '1.16' ]
        # arm64 for darwin is disabled as it's not currently supported by the go
        # compiler for our use case
    steps:
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - run: go build -o release/powerline-go-$GOOS-$GOARCH
        env:
          CGO_ENABLED: 0
          GOOS: darwin
          GOARCH: ${{ matrix.arch }}
  release-windows:
    name: Build release binaries for windows
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'amd64' ]
        go-version: [ '1.15', '1.16' ]
        # arm64 for windows is disabled as it's not currently supported by the
        # go compiler for our use case
    steps:
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - run: go build -o release/powerline-go-$GOOS-$GOARCH
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: ${{ matrix.arch }}
  release-bsd:
    name: Build release binaries for BSD
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'amd64' ]
        os: [ 'freebsd', 'netbsd', 'openbsd' ]
        go-version: [ '1.15', '1.16' ]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - run: go build -o release/powerline-go-$GOOS-$GOARCH
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

name: Build and Push to DockerHub
on:
  push:
    branches:
      - 'master'
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: pridkett/udm-pro-memory-monitor:latest
